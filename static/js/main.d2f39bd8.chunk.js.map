{"version":3,"sources":["utils/GlobalState.js","Map.js","Name.js","Location.js","UserForm.js","utils/debounceLocation.js","index.js","utils/actions.js"],"names":["GlobalContext","React","createContext","reducer","state","type","payload","location","Error","GlobalProvider","children","useReducer","name","city","dispatch","useEffect","navigator","geolocation","getCurrentPosition","a","coords","lat","latitude","lon","longitude","fetch","response","json","data","console","log","plus_code","userCityArr","compound_code","split","slice","userCity","join","substring","length","actions","updateLocation","Provider","value","M","ReactMapboxGl","accessToken","Map","useContext","style","containerStyle","height","width","border","marginTop","center","zoom","id","layout","coordinates","RandomComponent","className","Location","Form","debouncedLocation","useState","setDebouncedLocation","timeoutId","setTimeout","clearTimeout","useDebounceLocation","updateCoords","results","geometry","lng","onChange","e","updateName","target","updateCity","App","UserForm","role","aria-label","Name","rootElement","document","getElementById","ReactDOM","render","TYPES","module","exports"],"mappings":"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","file":"static/js/main.d2f39bd8.chunk.js","sourcesContent":["import React, { useEffect, useReducer, useState } from 'react';\r\nimport actions from './actions';\r\n\r\nconst GlobalContext = React.createContext(null);\r\n\r\nfunction reducer(state, { type, payload }) {\r\n  switch (type) {\r\n    case 'UPDATE_LOCATION':\r\n      return { ...state, location: { ...payload } };\r\n    case 'UPDATE_COORDS':\r\n      return {\r\n        ...state,\r\n        location: {\r\n          ...state.location,\r\n          ...payload,\r\n        },\r\n      };\r\n    case 'UPDATE_CITY':\r\n      return {\r\n        ...state,\r\n        location: {\r\n          ...state.location,\r\n          ...payload,\r\n        },\r\n      };\r\n    case 'UPDATE_NAME':\r\n      return {\r\n        ...state,\r\n        ...payload,\r\n      };\r\n    default:\r\n      throw new Error();\r\n  }\r\n}\r\n\r\nfunction GlobalProvider({ children }) {\r\n  const [state, dispatch] = useReducer(reducer, {\r\n    name: '',\r\n    location: { city: '' },\r\n  });\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async ({ coords: { latitude: lat, longitude: lon } }) => {\r\n        const response = await fetch(\r\n          `https://maps.googleapis.com/maps/api/geocode/json?latlng=${lat},${lon}&key=AIzaSyD_tgpw_aI3elBJ3FQzH5kqi00Qep6jXxM`\r\n        );\r\n        const data = await response.json();\r\n        console.log(data.plus_code);\r\n        const userCityArr = [\r\n          data.plus_code.compound_code.split(' ').slice(1, 2),\r\n          ' ',\r\n          data.plus_code.compound_code.split(' ').slice(2, 3),\r\n        ];\r\n        const userCity = userCityArr\r\n          .join('')\r\n          .substring(0, userCityArr.join('').length - 1);\r\n        dispatch(actions.updateLocation(userCity, { lat, lon }));\r\n      },\r\n      () => {\r\n        console.log(\"Couldn't get position! Using Default..\");\r\n        dispatch(\r\n          actions.updateLocation('Raleigh, NC', {\r\n            lat: 35.787743,\r\n            lon: -78.644257,\r\n          })\r\n        );\r\n      }\r\n    );\r\n  }, []);\r\n  return (\r\n    <GlobalContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n}\r\n\r\nexport { GlobalProvider, GlobalContext };\r\n","import { useContext } from 'react';\r\nimport ReactMapboxGl, { Layer, Feature, LngLat } from 'react-mapbox-gl';\r\nimport { GlobalContext } from './utils/GlobalState';\r\nimport 'mapbox-gl/dist/mapbox-gl.css';\r\n\r\nconst M = ReactMapboxGl({\r\n  accessToken:\r\n    'pk.eyJ1IjoianJqYWNrc28iLCJhIjoiY2s5ZzFvMmN2MGV0dzNtbzN4dGlqaGc1dCJ9.vUi9VvVM7kb2AoPYLVW89w',\r\n});\r\n\r\nexport const Map = () => {\r\n  const {\r\n    state: { location },\r\n  } = useContext(GlobalContext);\r\n  const lat = location.coords?.lat;\r\n  const lon = location.coords?.lon;\r\n  return (\r\n    <>\r\n      {lat && lon && (\r\n        <M\r\n          style=\"mapbox://styles/mapbox/streets-v9\"\r\n          containerStyle={{\r\n            height: '90vh',\r\n            width: '100%',\r\n            border: '1px solid black',\r\n            marginTop: '1rem',\r\n          }}\r\n          center={[lon, lat]}\r\n          zoom={[9]}\r\n        >\r\n          <Layer\r\n            type=\"symbol\"\r\n            id=\"marker\"\r\n            layout={{ 'icon-image': 'marker-15' }}\r\n          >\r\n            <Feature coordinates={[lat, lon]} />\r\n          </Layer>\r\n        </M>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { useContext } from 'react';\nimport { GlobalContext } from './utils/GlobalState';\n// This component displays name from Context\nconst RandomComponent = () => {\n  const {\n    state: { name },\n  } = useContext(GlobalContext);\n\n  return (\n    <div style={{ marginTop: '30px' }}>\n      <h2 className=\"is-size-4\">\n        {/* Pass name from context here */}\n        <strong>Name</strong>: {name}\n      </h2>\n    </div>\n  );\n};\n\nexport default RandomComponent;\n","import { useContext } from 'react';\r\nimport { GlobalContext } from './utils/GlobalState';\r\n// This component displays location from context\r\n\r\nconst Location = () => {\r\n  const {\r\n    state: { location },\r\n  } = useContext(GlobalContext);\r\n  return (\r\n    <div>\r\n      {/* Display user's location from Context */}\r\n      <h2 className=\"is-size-4\">\r\n        <strong>Location</strong>: {location.city}\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import { useContext, useEffect } from 'react';\r\nimport { useDebounceLocation } from './utils/debounceLocation';\r\nimport { GlobalContext } from './utils/GlobalState';\r\nimport actions from './utils/actions';\r\n\r\nconst Form = () => {\r\n  const {\r\n    state: { name, location },\r\n    dispatch,\r\n  } = useContext(GlobalContext);\r\n  const debouncedLocation = useDebounceLocation(location.city);\r\n  useEffect(async () => {\r\n    if (debouncedLocation) {\r\n      console.log('Setting new location coords');\r\n      const response = await fetch(\r\n        `https://maps.googleapis.com/maps/api/geocode/json?address=${debouncedLocation}&key=AIzaSyD_tgpw_aI3elBJ3FQzH5kqi00Qep6jXxM`\r\n      );\r\n      const data = await response.json();\r\n      console.log(data);\r\n      dispatch(\r\n        actions.updateCoords({\r\n          lat: data.results[0].geometry.location.lat,\r\n          lon: data.results[0].geometry.location.lng,\r\n        })\r\n      );\r\n    }\r\n  }, [debouncedLocation]);\r\n\r\n  return (\r\n    <div className=\"user-form\">\r\n      {/* Change user's name in context */}\r\n      <div className=\"input-item\">\r\n        <label className=\"label\">Update Name: </label>\r\n        <input\r\n          className=\"input\"\r\n          onChange={(e) => dispatch(actions.updateName(e.target.value))}\r\n          value={name}\r\n        />\r\n      </div>\r\n\r\n      {/* Change user's location in context */}\r\n      <div className=\"input-item\">\r\n        <label className=\"label\">Update Location: </label>\r\n        <input\r\n          className=\"input\"\r\n          onChange={(e) => dispatch(actions.updateCity(e.target.value))}\r\n          value={location.city}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { useEffect, useState } from 'react';\r\n\r\nconst useDebounceLocation = (value) => {\r\n  const [debouncedLocation, setDebouncedLocation] = useState(value);\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      setDebouncedLocation(value);\r\n    }, 2000);\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [value]);\r\n\r\n  return debouncedLocation;\r\n};\r\n\r\nexport { useDebounceLocation };\r\n","import ReactDOM from 'react-dom';\r\nimport { Map } from './Map';\r\nimport Name from './Name';\r\nimport Location from './Location';\r\nimport UserForm from './UserForm';\r\nimport { GlobalProvider } from './utils/GlobalState';\r\nimport './styles.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalProvider>\r\n      <div className=\"App\">\r\n        <div className=\"container left-container\">\r\n          {' '}\r\n          <h2 className=\"is-size-4\">\r\n            We'll use the React Context API with useReducer to create a Global\r\n            Store with dispatch actions to pass and receive data in any\r\n            component.\r\n          </h2>\r\n          <div className=\"container form-container\">\r\n            <UserForm />\r\n            <h2 className=\"is-size-4\">\r\n              User Info Here{' '}\r\n              <span role=\"img\" aria-label=\"point-down-label\">\r\n                👇\r\n              </span>\r\n            </h2>\r\n            <p>\r\n              These two children components and their nested components can\r\n              receive data.\r\n            </p>\r\n            <Name />\r\n            <Location />\r\n          </div>\r\n        </div>\r\n        <div className=\"container map\">\r\n          <Map />\r\n        </div>\r\n      </div>\r\n    </GlobalProvider>\r\n  );\r\n}\r\n\r\n// Wrap parent component with context provider\r\nconst rootElement = document.getElementById('root');\r\nReactDOM.render(<App />, rootElement);\r\n","const TYPES = {\r\n  UPDATE_LOCATION: 'UPDATE_LOCATION',\r\n  UPDATE_COORDS: 'UPDATE_COORDS',\r\n  UPDATE_CITY: 'UPDATE_CITY',\r\n  UPDATE_NAME: 'UPDATE_NAME',\r\n};\r\n\r\nconst actions = {\r\n  updateLocation: (city, coords) => ({\r\n    type: TYPES.UPDATE_LOCATION,\r\n    payload: { city, coords },\r\n  }),\r\n  updateCoords: (coords) => ({\r\n    type: TYPES.UPDATE_COORDS,\r\n    payload: { coords },\r\n  }),\r\n  updateCity: (city) => ({\r\n    type: TYPES.UPDATE_CITY,\r\n    payload: { city },\r\n  }),\r\n  updateName: (name) => ({\r\n    type: TYPES.UPDATE_NAME,\r\n    payload: { name },\r\n  }),\r\n};\r\n\r\nmodule.exports = actions;\r\n"],"sourceRoot":""}